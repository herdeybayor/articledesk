<h1 class="mb-4">My Bookmarks</h1>

<div class="row" id="bookmarks-container">
    <div class="col-12">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
</div>

<template id="bookmark-template">
    <div class="col-md-4 mb-4">
        <div class="card h-100">
            <img src="" class="card-img-top article-image" alt="Article image">
            <div class="card-body d-flex flex-column">
                <h5 class="card-title article-title"></h5>
                <p class="text-muted mb-1 article-source"></p>
                <p class="text-muted mb-2 article-date"></p>
                <p class="card-text article-description"></p>
                <div class="mt-auto">
                    <a href="#" class="btn btn-primary article-link" target="_blank">Read More</a>
                    <button class="btn btn-danger remove-btn ms-2" data-id="">
                        <i class="bi bi-trash"></i> Remove
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<template id="empty-bookmarks">
    <div class="col-12 text-center my-5">
        <div class="py-5">
            <i class="bi bi-bookmark-plus" style="font-size: 3rem;"></i>
            <h3 class="mt-3">No Bookmarks Yet</h3>
            <p class="text-muted">Start saving articles to see them here</p>
            <a href="/search" class="btn btn-primary">Search Articles</a>
        </div>
    </div>
</template>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch user's bookmarks
        fetchBookmarks();

        // Add event listener for remove buttons
        document.getElementById('bookmarks-container').addEventListener('click', function (e) {
            if (e.target.closest('.remove-btn')) {
                e.preventDefault();
                const btn = e.target.closest('.remove-btn');
                const bookmarkId = btn.dataset.id;
                removeBookmark(bookmarkId, btn.closest('.col-md-4'));
            }
        });
    });

    // Fetch bookmarks from API
    async function fetchBookmarks() {
        try {
            // We don't need to check for token since we're using cookies
            // but keep localStorage token for compatibility with API requests
            const token = localStorage.getItem('token');

            const headers = {};
            if (token) {
                headers['Authorization'] = 'Bearer ' + token;
            }

            const response = await fetch('/api/bookmarks', {
                headers: headers
            });

            if (response.status === 401) {
                // Token expired or invalid
                window.location.href = '/login';
                return;
            }

            const bookmarks = await response.json();

            if (bookmarks.length > 0) {
                renderBookmarks(bookmarks);
            } else {
                showEmptyState();
            }
        } catch (error) {
            console.error('Error fetching bookmarks:', error);
            document.getElementById('bookmarks-container').innerHTML = `
    <div class="col-12 text-center my-5">
        <p class="text-danger">Error loading bookmarks. Please try again later.</p>
    </div>
    `;
        }
    }

    // Render bookmarks using template
    function renderBookmarks(bookmarks) {
        const container = document.getElementById('bookmarks-container');
        container.innerHTML = '';
        const template = document.getElementById('bookmark-template');

        bookmarks.forEach(bookmark => {
            const clone = template.content.cloneNode(true);

            // Set article data
            clone.querySelector('.article-title').textContent = bookmark.title;
            clone.querySelector('.article-source').textContent = bookmark.sourceName;
            clone.querySelector('.article-date').textContent = new Date(bookmark.publishedAt).toLocaleDateString();
            clone.querySelector('.article-description').textContent = bookmark.description;
            clone.querySelector('.article-link').href = bookmark.url;

            // Set article image or fallback
            const imgElement = clone.querySelector('.article-image');
            if (bookmark.urlToImage) {
                imgElement.src = bookmark.urlToImage;
            } else {
                imgElement.src = '/images/news-placeholder.png';
            }
            imgElement.onerror = function () {
                this.src = '/images/news-placeholder.png';
            };

            // Set remove button data
            const removeBtn = clone.querySelector('.remove-btn');
            removeBtn.dataset.id = bookmark.bookmarkId;

            container.appendChild(clone);
        });
    }

    // Show empty state when no bookmarks
    function showEmptyState() {
        const container = document.getElementById('bookmarks-container');
        const template = document.getElementById('empty-bookmarks');
        const clone = template.content.cloneNode(true);
        container.innerHTML = '';
        container.appendChild(clone);
    }

    // Remove a bookmark
    async function removeBookmark(bookmarkId, element) {
        try {
            // We don't need to check for token since we're using cookies
            // but keep localStorage token for compatibility with API requests
            const token = localStorage.getItem('token');

            const headers = {};
            if (token) {
                headers['Authorization'] = 'Bearer ' + token;
            }

            const response = await fetch('/api/bookmarks/' + bookmarkId, {
                method: 'DELETE',
                headers: headers
            });

            if (response.ok) {
                // Remove the card from the UI with animation
                element.classList.add('fade-out');
                setTimeout(() => {
                    element.remove();

                    // If no bookmarks left, show empty state
                    if (document.getElementById('bookmarks-container').children.length === 0) {
                        showEmptyState();
                    }
                }, 300);
            } else if (response.status === 401) {
                // Unauthorized
                window.location.href = '/login';
            } else {
                const data = await response.json();
                alert(data.error || 'Failed to remove bookmark');
            }
        } catch (error) {
            console.error('Error removing bookmark:', error);
            alert('Failed to remove bookmark. Please try again.');
        }
    }
</script>

<style>
    .fade-out {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
</style>